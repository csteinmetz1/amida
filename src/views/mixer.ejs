<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<title>amida | song <%= data.song.id %> </title>
	<link rel="stylesheet" href="/css/styles.css">
	<script src="https://cdnjs.cloudflare.com/ajax/libs/tone/13.7.4/Tone.js"></script>
	<script src="https://tonejs.github.io/examples/js/tonejs-ui.js"></script>
</head>

<body>
		<div style="margin: 15px 0 10px 0;">
				<p style="display: inline;"> Logged in as <strong><%= data.userId %></strong></p>
				<button class="save-button" type="btn" onclick="location.href = '/logout';"">
					<p>Logout</p>
				</button>
			</div>
    <section>
		<div class="mixer">
			<h2 style="text-align: center;"> <%= data.song.id %> - <%= data.song.artist %> - <%= data.song.title %></h2>
			<div class="nav"> 
				<p>
					<% if (data.song.id - 1 > 0) { %>
						<a href="/mixer/<%= data.song.id - 1 %>">Prev</a> | 
					<% } %>
						<a href="/song-list">Songs</a> 
					<% if (data.song.id + 1 <= 100) { %>
						| <a href="/mixer/<%= data.song.id + 1 %>">Next</a>
					<% } %>
				</p>
			</div>
			<tone-content class="fade-in one">
				<div id="tracks">
					<tone-channel label="bass" id="bass"></tone-channel>
					<tone-channel label="drums" id="drums"></tone-channel>
					<tone-channel label="other" id="other"></tone-channel>
					<tone-channel label="vocals" id="vocals"></tone-channel>
				</div>
				<tone-play-toggle></tone-play-toggle>
			<p id="loading">Loading...</p>
			</tone-content>
			<button class="save-button" type="btn" onclick="save('<%= data.userId %>', '<%= data.song.id %>');"">
				<p>Save</p>
			</button>
			<p id="result"></p>
		</div>

	</section>

	<script type="text/javascript">

	var start = window.performance.now(); // start timing the mix in seconds

		function makeChannel(name, url){
			var channel = new Tone.Channel().toMaster();
			var player = new Tone.Player({
				url : url,
				loop : true
			}).sync().start(0);
			player.chain(channel);
			//bind the UI
			document.querySelector(`#${name}`).bind(channel);
			return player;
		}	

		function save(userId, songId) {
			var mixTime = (window.performance.now() - start)/1000; // stop timing the mix in seconds
			var result = document.getElementById("result");
			var channels = document.getElementsByTagName("tone-channel");
			var gains = [];

			for (var idx = 0; idx<channels.length; idx++) {
				gains.push(parseInt(channels[idx].shadowRoot.querySelector("tone-volume-slider")
									.shadowRoot.querySelector("#number").childNodes[3].nodeValue));			
			}
			console.log(gains);
			result.innerHTML = "Saved mix!";
			location.href = `/save/${userId}/${songId}/${gains[0]}/${gains[1]}/${gains[2]}/${gains[3]}/${mixTime}`
			start = window.performance.now(); // start timing the mix again in seconds
		}

		function removePans() {
			var channels = document.getElementsByTagName("tone-channel");

			for (var idx = 0; idx<channels.length; idx++) {
				channels[idx].shadowRoot.childNodes[4].childNodes[5].remove();
			}
		}
	
		b = makeChannel("bass",   "/<%- data.song.tracks.stereo['bass'] %>"   );
		d = makeChannel("drums",  "/<%- data.song.tracks.stereo['drums'] %>"  );
		o = makeChannel("other",  "/<%- data.song.tracks.stereo['other'] %>"  );
		v = makeChannel("vocals", "/<%- data.song.tracks.stereo['vocals'] %>" );
		document.querySelector("tone-play-toggle").bind(Tone.Transport);
		removePans();
		
		// check if all audio files have loaded
		var interval = setInterval(function() {
			if (b.loaded && d.loaded && o.loaded && v.loaded) { 
				var loading = document.getElementById("loading");
				loading.innerHTML = "Loaded.";
				clearInterval(interval);
			}
		}, 250); 

	</script>
</body>
</html>